// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: gRPC/DestinationbardCommunicationAPI.proto
// </auto-generated>
#pragma warning disable 0414, 1591
#region Designer generated code

using grpc = global::Grpc.Core;

/// <summary>
/// 行先ボード通信API
/// </summary>
public static partial class DestinationbardCommunicationAPI
{
  static readonly string __ServiceName = "DestinationbardCommunicationAPI";

  static void __Helper_SerializeMessage(global::Google.Protobuf.IMessage message, grpc::SerializationContext context)
  {
    #if !GRPC_DISABLE_PROTOBUF_BUFFER_SERIALIZATION
    if (message is global::Google.Protobuf.IBufferMessage)
    {
      context.SetPayloadLength(message.CalculateSize());
      global::Google.Protobuf.MessageExtensions.WriteTo(message, context.GetBufferWriter());
      context.Complete();
      return;
    }
    #endif
    context.Complete(global::Google.Protobuf.MessageExtensions.ToByteArray(message));
  }

  static class __Helper_MessageCache<T>
  {
    public static readonly bool IsBufferMessage = global::System.Reflection.IntrospectionExtensions.GetTypeInfo(typeof(global::Google.Protobuf.IBufferMessage)).IsAssignableFrom(typeof(T));
  }

  static T __Helper_DeserializeMessage<T>(grpc::DeserializationContext context, global::Google.Protobuf.MessageParser<T> parser) where T : global::Google.Protobuf.IMessage<T>
  {
    #if !GRPC_DISABLE_PROTOBUF_BUFFER_SERIALIZATION
    if (__Helper_MessageCache<T>.IsBufferMessage)
    {
      return parser.ParseFrom(context.PayloadAsReadOnlySequence());
    }
    #endif
    return parser.ParseFrom(context.PayloadAsNewBuffer());
  }

  static readonly grpc::Marshaller<global::GetRegistStaffRequest> __Marshaller_GetRegistStaffRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::GetRegistStaffRequest.Parser));
  static readonly grpc::Marshaller<global::GetRegistStaffReply> __Marshaller_GetRegistStaffReply = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::GetRegistStaffReply.Parser));
  static readonly grpc::Marshaller<global::RegistStaffRequest> __Marshaller_RegistStaffRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::RegistStaffRequest.Parser));
  static readonly grpc::Marshaller<global::RegistStaffReply> __Marshaller_RegistStaffReply = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::RegistStaffReply.Parser));
  static readonly grpc::Marshaller<global::GetActionsRequest> __Marshaller_GetActionsRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::GetActionsRequest.Parser));
  static readonly grpc::Marshaller<global::GetActionsReply> __Marshaller_GetActionsReply = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::GetActionsReply.Parser));
  static readonly grpc::Marshaller<global::GetDestinationsRequest> __Marshaller_GetDestinationsRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::GetDestinationsRequest.Parser));
  static readonly grpc::Marshaller<global::GetDestinationsReply> __Marshaller_GetDestinationsReply = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::GetDestinationsReply.Parser));
  static readonly grpc::Marshaller<global::RegistActionPlanRequest> __Marshaller_RegistActionPlanRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::RegistActionPlanRequest.Parser));
  static readonly grpc::Marshaller<global::RegistActionPlanReply> __Marshaller_RegistActionPlanReply = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::RegistActionPlanReply.Parser));
  static readonly grpc::Marshaller<global::RegistActionsRequest> __Marshaller_RegistActionsRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::RegistActionsRequest.Parser));
  static readonly grpc::Marshaller<global::RegistActionsReply> __Marshaller_RegistActionsReply = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::RegistActionsReply.Parser));
  static readonly grpc::Marshaller<global::RegistDestinationsRequest> __Marshaller_RegistDestinationsRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::RegistDestinationsRequest.Parser));
  static readonly grpc::Marshaller<global::RegistDestinationsReply> __Marshaller_RegistDestinationsReply = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::RegistDestinationsReply.Parser));
  static readonly grpc::Marshaller<global::ActionPlanTableRequest> __Marshaller_ActionPlanTableRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::ActionPlanTableRequest.Parser));
  static readonly grpc::Marshaller<global::ActionPlanTableReply> __Marshaller_ActionPlanTableReply = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::ActionPlanTableReply.Parser));
  static readonly grpc::Marshaller<global::StaffMasterRequest> __Marshaller_StaffMasterRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::StaffMasterRequest.Parser));
  static readonly grpc::Marshaller<global::StaffMasterReply> __Marshaller_StaffMasterReply = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::StaffMasterReply.Parser));
  static readonly grpc::Marshaller<global::ActionMasterRequest> __Marshaller_ActionMasterRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::ActionMasterRequest.Parser));
  static readonly grpc::Marshaller<global::ActionMasterReply> __Marshaller_ActionMasterReply = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::ActionMasterReply.Parser));
  static readonly grpc::Marshaller<global::DestinationMasterRequest> __Marshaller_DestinationMasterRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::DestinationMasterRequest.Parser));
  static readonly grpc::Marshaller<global::DestinationMasterReply> __Marshaller_DestinationMasterReply = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::DestinationMasterReply.Parser));

  static readonly grpc::Method<global::GetRegistStaffRequest, global::GetRegistStaffReply> __Method_GetRegistStaff = new grpc::Method<global::GetRegistStaffRequest, global::GetRegistStaffReply>(
      grpc::MethodType.Unary,
      __ServiceName,
      "GetRegistStaff",
      __Marshaller_GetRegistStaffRequest,
      __Marshaller_GetRegistStaffReply);

  static readonly grpc::Method<global::RegistStaffRequest, global::RegistStaffReply> __Method_RegistStaff = new grpc::Method<global::RegistStaffRequest, global::RegistStaffReply>(
      grpc::MethodType.Unary,
      __ServiceName,
      "RegistStaff",
      __Marshaller_RegistStaffRequest,
      __Marshaller_RegistStaffReply);

  static readonly grpc::Method<global::GetActionsRequest, global::GetActionsReply> __Method_GetActions = new grpc::Method<global::GetActionsRequest, global::GetActionsReply>(
      grpc::MethodType.Unary,
      __ServiceName,
      "GetActions",
      __Marshaller_GetActionsRequest,
      __Marshaller_GetActionsReply);

  static readonly grpc::Method<global::GetDestinationsRequest, global::GetDestinationsReply> __Method_GetDestinations = new grpc::Method<global::GetDestinationsRequest, global::GetDestinationsReply>(
      grpc::MethodType.Unary,
      __ServiceName,
      "GetDestinations",
      __Marshaller_GetDestinationsRequest,
      __Marshaller_GetDestinationsReply);

  static readonly grpc::Method<global::RegistActionPlanRequest, global::RegistActionPlanReply> __Method_RegistActionPlan = new grpc::Method<global::RegistActionPlanRequest, global::RegistActionPlanReply>(
      grpc::MethodType.Unary,
      __ServiceName,
      "RegistActionPlan",
      __Marshaller_RegistActionPlanRequest,
      __Marshaller_RegistActionPlanReply);

  static readonly grpc::Method<global::RegistActionsRequest, global::RegistActionsReply> __Method_RegistActions = new grpc::Method<global::RegistActionsRequest, global::RegistActionsReply>(
      grpc::MethodType.Unary,
      __ServiceName,
      "RegistActions",
      __Marshaller_RegistActionsRequest,
      __Marshaller_RegistActionsReply);

  static readonly grpc::Method<global::RegistDestinationsRequest, global::RegistDestinationsReply> __Method_RegistDestinations = new grpc::Method<global::RegistDestinationsRequest, global::RegistDestinationsReply>(
      grpc::MethodType.Unary,
      __ServiceName,
      "RegistDestinations",
      __Marshaller_RegistDestinationsRequest,
      __Marshaller_RegistDestinationsReply);

  static readonly grpc::Method<global::ActionPlanTableRequest, global::ActionPlanTableReply> __Method_ActionPlanTable = new grpc::Method<global::ActionPlanTableRequest, global::ActionPlanTableReply>(
      grpc::MethodType.Unary,
      __ServiceName,
      "ActionPlanTable",
      __Marshaller_ActionPlanTableRequest,
      __Marshaller_ActionPlanTableReply);

  static readonly grpc::Method<global::StaffMasterRequest, global::StaffMasterReply> __Method_StaffMaster = new grpc::Method<global::StaffMasterRequest, global::StaffMasterReply>(
      grpc::MethodType.Unary,
      __ServiceName,
      "StaffMaster",
      __Marshaller_StaffMasterRequest,
      __Marshaller_StaffMasterReply);

  static readonly grpc::Method<global::ActionMasterRequest, global::ActionMasterReply> __Method_ActionMaster = new grpc::Method<global::ActionMasterRequest, global::ActionMasterReply>(
      grpc::MethodType.Unary,
      __ServiceName,
      "ActionMaster",
      __Marshaller_ActionMasterRequest,
      __Marshaller_ActionMasterReply);

  static readonly grpc::Method<global::DestinationMasterRequest, global::DestinationMasterReply> __Method_DestinationMaster = new grpc::Method<global::DestinationMasterRequest, global::DestinationMasterReply>(
      grpc::MethodType.Unary,
      __ServiceName,
      "DestinationMaster",
      __Marshaller_DestinationMasterRequest,
      __Marshaller_DestinationMasterReply);

  /// <summary>Service descriptor</summary>
  public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
  {
    get { return global::DestinationbardCommunicationAPIReflection.Descriptor.Services[0]; }
  }

  /// <summary>Base class for server-side implementations of DestinationbardCommunicationAPI</summary>
  [grpc::BindServiceMethod(typeof(DestinationbardCommunicationAPI), "BindService")]
  public abstract partial class DestinationbardCommunicationAPIBase
  {
    /// <summary>
    /// 登録スタッフ情報の取得API
    /// </summary>
    /// <param name="request">The request received from the client.</param>
    /// <param name="context">The context of the server-side call handler being invoked.</param>
    /// <returns>The response to send back to the client (wrapped by a task).</returns>
    public virtual global::System.Threading.Tasks.Task<global::GetRegistStaffReply> GetRegistStaff(global::GetRegistStaffRequest request, grpc::ServerCallContext context)
    {
      throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
    }

    /// <summary>
    /// スタッフ情報の登録
    /// </summary>
    /// <param name="request">The request received from the client.</param>
    /// <param name="context">The context of the server-side call handler being invoked.</param>
    /// <returns>The response to send back to the client (wrapped by a task).</returns>
    public virtual global::System.Threading.Tasks.Task<global::RegistStaffReply> RegistStaff(global::RegistStaffRequest request, grpc::ServerCallContext context)
    {
      throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
    }

    /// <summary>
    /// 行動一覧の取得
    /// </summary>
    /// <param name="request">The request received from the client.</param>
    /// <param name="context">The context of the server-side call handler being invoked.</param>
    /// <returns>The response to send back to the client (wrapped by a task).</returns>
    public virtual global::System.Threading.Tasks.Task<global::GetActionsReply> GetActions(global::GetActionsRequest request, grpc::ServerCallContext context)
    {
      throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
    }

    /// <summary>
    /// 行先一覧の取得
    /// </summary>
    /// <param name="request">The request received from the client.</param>
    /// <param name="context">The context of the server-side call handler being invoked.</param>
    /// <returns>The response to send back to the client (wrapped by a task).</returns>
    public virtual global::System.Threading.Tasks.Task<global::GetDestinationsReply> GetDestinations(global::GetDestinationsRequest request, grpc::ServerCallContext context)
    {
      throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
    }

    /// <summary>
    /// 行動予定の登録
    /// </summary>
    /// <param name="request">The request received from the client.</param>
    /// <param name="context">The context of the server-side call handler being invoked.</param>
    /// <returns>The response to send back to the client (wrapped by a task).</returns>
    public virtual global::System.Threading.Tasks.Task<global::RegistActionPlanReply> RegistActionPlan(global::RegistActionPlanRequest request, grpc::ServerCallContext context)
    {
      throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
    }

    /// <summary>
    /// 行動一覧の更新
    /// </summary>
    /// <param name="request">The request received from the client.</param>
    /// <param name="context">The context of the server-side call handler being invoked.</param>
    /// <returns>The response to send back to the client (wrapped by a task).</returns>
    public virtual global::System.Threading.Tasks.Task<global::RegistActionsReply> RegistActions(global::RegistActionsRequest request, grpc::ServerCallContext context)
    {
      throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
    }

    /// <summary>
    /// 行先一覧の更新
    /// </summary>
    /// <param name="request">The request received from the client.</param>
    /// <param name="context">The context of the server-side call handler being invoked.</param>
    /// <returns>The response to send back to the client (wrapped by a task).</returns>
    public virtual global::System.Threading.Tasks.Task<global::RegistDestinationsReply> RegistDestinations(global::RegistDestinationsRequest request, grpc::ServerCallContext context)
    {
      throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
    }

    /// <summary>
    /// 現在の行動予定一覧表
    /// </summary>
    /// <param name="request">The request received from the client.</param>
    /// <param name="context">The context of the server-side call handler being invoked.</param>
    /// <returns>The response to send back to the client (wrapped by a task).</returns>
    public virtual global::System.Threading.Tasks.Task<global::ActionPlanTableReply> ActionPlanTable(global::ActionPlanTableRequest request, grpc::ServerCallContext context)
    {
      throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
    }

    /// <summary>
    /// スタッフマスター
    /// </summary>
    /// <param name="request">The request received from the client.</param>
    /// <param name="context">The context of the server-side call handler being invoked.</param>
    /// <returns>The response to send back to the client (wrapped by a task).</returns>
    public virtual global::System.Threading.Tasks.Task<global::StaffMasterReply> StaffMaster(global::StaffMasterRequest request, grpc::ServerCallContext context)
    {
      throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
    }

    /// <summary>
    /// 行動マスター
    /// </summary>
    /// <param name="request">The request received from the client.</param>
    /// <param name="context">The context of the server-side call handler being invoked.</param>
    /// <returns>The response to send back to the client (wrapped by a task).</returns>
    public virtual global::System.Threading.Tasks.Task<global::ActionMasterReply> ActionMaster(global::ActionMasterRequest request, grpc::ServerCallContext context)
    {
      throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
    }

    /// <summary>
    /// 行先マスター
    /// </summary>
    /// <param name="request">The request received from the client.</param>
    /// <param name="context">The context of the server-side call handler being invoked.</param>
    /// <returns>The response to send back to the client (wrapped by a task).</returns>
    public virtual global::System.Threading.Tasks.Task<global::DestinationMasterReply> DestinationMaster(global::DestinationMasterRequest request, grpc::ServerCallContext context)
    {
      throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
    }

  }

  /// <summary>Client for DestinationbardCommunicationAPI</summary>
  public partial class DestinationbardCommunicationAPIClient : grpc::ClientBase<DestinationbardCommunicationAPIClient>
  {
    /// <summary>Creates a new client for DestinationbardCommunicationAPI</summary>
    /// <param name="channel">The channel to use to make remote calls.</param>
    public DestinationbardCommunicationAPIClient(grpc::ChannelBase channel) : base(channel)
    {
    }
    /// <summary>Creates a new client for DestinationbardCommunicationAPI that uses a custom <c>CallInvoker</c>.</summary>
    /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
    public DestinationbardCommunicationAPIClient(grpc::CallInvoker callInvoker) : base(callInvoker)
    {
    }
    /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
    protected DestinationbardCommunicationAPIClient() : base()
    {
    }
    /// <summary>Protected constructor to allow creation of configured clients.</summary>
    /// <param name="configuration">The client configuration.</param>
    protected DestinationbardCommunicationAPIClient(ClientBaseConfiguration configuration) : base(configuration)
    {
    }

    /// <summary>
    /// 登録スタッフ情報の取得API
    /// </summary>
    /// <param name="request">The request to send to the server.</param>
    /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
    /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
    /// <param name="cancellationToken">An optional token for canceling the call.</param>
    /// <returns>The response received from the server.</returns>
    public virtual global::GetRegistStaffReply GetRegistStaff(global::GetRegistStaffRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
    {
      return GetRegistStaff(request, new grpc::CallOptions(headers, deadline, cancellationToken));
    }
    /// <summary>
    /// 登録スタッフ情報の取得API
    /// </summary>
    /// <param name="request">The request to send to the server.</param>
    /// <param name="options">The options for the call.</param>
    /// <returns>The response received from the server.</returns>
    public virtual global::GetRegistStaffReply GetRegistStaff(global::GetRegistStaffRequest request, grpc::CallOptions options)
    {
      return CallInvoker.BlockingUnaryCall(__Method_GetRegistStaff, null, options, request);
    }
    /// <summary>
    /// 登録スタッフ情報の取得API
    /// </summary>
    /// <param name="request">The request to send to the server.</param>
    /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
    /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
    /// <param name="cancellationToken">An optional token for canceling the call.</param>
    /// <returns>The call object.</returns>
    public virtual grpc::AsyncUnaryCall<global::GetRegistStaffReply> GetRegistStaffAsync(global::GetRegistStaffRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
    {
      return GetRegistStaffAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
    }
    /// <summary>
    /// 登録スタッフ情報の取得API
    /// </summary>
    /// <param name="request">The request to send to the server.</param>
    /// <param name="options">The options for the call.</param>
    /// <returns>The call object.</returns>
    public virtual grpc::AsyncUnaryCall<global::GetRegistStaffReply> GetRegistStaffAsync(global::GetRegistStaffRequest request, grpc::CallOptions options)
    {
      return CallInvoker.AsyncUnaryCall(__Method_GetRegistStaff, null, options, request);
    }
    /// <summary>
    /// スタッフ情報の登録
    /// </summary>
    /// <param name="request">The request to send to the server.</param>
    /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
    /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
    /// <param name="cancellationToken">An optional token for canceling the call.</param>
    /// <returns>The response received from the server.</returns>
    public virtual global::RegistStaffReply RegistStaff(global::RegistStaffRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
    {
      return RegistStaff(request, new grpc::CallOptions(headers, deadline, cancellationToken));
    }
    /// <summary>
    /// スタッフ情報の登録
    /// </summary>
    /// <param name="request">The request to send to the server.</param>
    /// <param name="options">The options for the call.</param>
    /// <returns>The response received from the server.</returns>
    public virtual global::RegistStaffReply RegistStaff(global::RegistStaffRequest request, grpc::CallOptions options)
    {
      return CallInvoker.BlockingUnaryCall(__Method_RegistStaff, null, options, request);
    }
    /// <summary>
    /// スタッフ情報の登録
    /// </summary>
    /// <param name="request">The request to send to the server.</param>
    /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
    /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
    /// <param name="cancellationToken">An optional token for canceling the call.</param>
    /// <returns>The call object.</returns>
    public virtual grpc::AsyncUnaryCall<global::RegistStaffReply> RegistStaffAsync(global::RegistStaffRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
    {
      return RegistStaffAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
    }
    /// <summary>
    /// スタッフ情報の登録
    /// </summary>
    /// <param name="request">The request to send to the server.</param>
    /// <param name="options">The options for the call.</param>
    /// <returns>The call object.</returns>
    public virtual grpc::AsyncUnaryCall<global::RegistStaffReply> RegistStaffAsync(global::RegistStaffRequest request, grpc::CallOptions options)
    {
      return CallInvoker.AsyncUnaryCall(__Method_RegistStaff, null, options, request);
    }
    /// <summary>
    /// 行動一覧の取得
    /// </summary>
    /// <param name="request">The request to send to the server.</param>
    /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
    /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
    /// <param name="cancellationToken">An optional token for canceling the call.</param>
    /// <returns>The response received from the server.</returns>
    public virtual global::GetActionsReply GetActions(global::GetActionsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
    {
      return GetActions(request, new grpc::CallOptions(headers, deadline, cancellationToken));
    }
    /// <summary>
    /// 行動一覧の取得
    /// </summary>
    /// <param name="request">The request to send to the server.</param>
    /// <param name="options">The options for the call.</param>
    /// <returns>The response received from the server.</returns>
    public virtual global::GetActionsReply GetActions(global::GetActionsRequest request, grpc::CallOptions options)
    {
      return CallInvoker.BlockingUnaryCall(__Method_GetActions, null, options, request);
    }
    /// <summary>
    /// 行動一覧の取得
    /// </summary>
    /// <param name="request">The request to send to the server.</param>
    /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
    /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
    /// <param name="cancellationToken">An optional token for canceling the call.</param>
    /// <returns>The call object.</returns>
    public virtual grpc::AsyncUnaryCall<global::GetActionsReply> GetActionsAsync(global::GetActionsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
    {
      return GetActionsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
    }
    /// <summary>
    /// 行動一覧の取得
    /// </summary>
    /// <param name="request">The request to send to the server.</param>
    /// <param name="options">The options for the call.</param>
    /// <returns>The call object.</returns>
    public virtual grpc::AsyncUnaryCall<global::GetActionsReply> GetActionsAsync(global::GetActionsRequest request, grpc::CallOptions options)
    {
      return CallInvoker.AsyncUnaryCall(__Method_GetActions, null, options, request);
    }
    /// <summary>
    /// 行先一覧の取得
    /// </summary>
    /// <param name="request">The request to send to the server.</param>
    /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
    /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
    /// <param name="cancellationToken">An optional token for canceling the call.</param>
    /// <returns>The response received from the server.</returns>
    public virtual global::GetDestinationsReply GetDestinations(global::GetDestinationsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
    {
      return GetDestinations(request, new grpc::CallOptions(headers, deadline, cancellationToken));
    }
    /// <summary>
    /// 行先一覧の取得
    /// </summary>
    /// <param name="request">The request to send to the server.</param>
    /// <param name="options">The options for the call.</param>
    /// <returns>The response received from the server.</returns>
    public virtual global::GetDestinationsReply GetDestinations(global::GetDestinationsRequest request, grpc::CallOptions options)
    {
      return CallInvoker.BlockingUnaryCall(__Method_GetDestinations, null, options, request);
    }
    /// <summary>
    /// 行先一覧の取得
    /// </summary>
    /// <param name="request">The request to send to the server.</param>
    /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
    /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
    /// <param name="cancellationToken">An optional token for canceling the call.</param>
    /// <returns>The call object.</returns>
    public virtual grpc::AsyncUnaryCall<global::GetDestinationsReply> GetDestinationsAsync(global::GetDestinationsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
    {
      return GetDestinationsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
    }
    /// <summary>
    /// 行先一覧の取得
    /// </summary>
    /// <param name="request">The request to send to the server.</param>
    /// <param name="options">The options for the call.</param>
    /// <returns>The call object.</returns>
    public virtual grpc::AsyncUnaryCall<global::GetDestinationsReply> GetDestinationsAsync(global::GetDestinationsRequest request, grpc::CallOptions options)
    {
      return CallInvoker.AsyncUnaryCall(__Method_GetDestinations, null, options, request);
    }
    /// <summary>
    /// 行動予定の登録
    /// </summary>
    /// <param name="request">The request to send to the server.</param>
    /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
    /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
    /// <param name="cancellationToken">An optional token for canceling the call.</param>
    /// <returns>The response received from the server.</returns>
    public virtual global::RegistActionPlanReply RegistActionPlan(global::RegistActionPlanRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
    {
      return RegistActionPlan(request, new grpc::CallOptions(headers, deadline, cancellationToken));
    }
    /// <summary>
    /// 行動予定の登録
    /// </summary>
    /// <param name="request">The request to send to the server.</param>
    /// <param name="options">The options for the call.</param>
    /// <returns>The response received from the server.</returns>
    public virtual global::RegistActionPlanReply RegistActionPlan(global::RegistActionPlanRequest request, grpc::CallOptions options)
    {
      return CallInvoker.BlockingUnaryCall(__Method_RegistActionPlan, null, options, request);
    }
    /// <summary>
    /// 行動予定の登録
    /// </summary>
    /// <param name="request">The request to send to the server.</param>
    /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
    /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
    /// <param name="cancellationToken">An optional token for canceling the call.</param>
    /// <returns>The call object.</returns>
    public virtual grpc::AsyncUnaryCall<global::RegistActionPlanReply> RegistActionPlanAsync(global::RegistActionPlanRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
    {
      return RegistActionPlanAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
    }
    /// <summary>
    /// 行動予定の登録
    /// </summary>
    /// <param name="request">The request to send to the server.</param>
    /// <param name="options">The options for the call.</param>
    /// <returns>The call object.</returns>
    public virtual grpc::AsyncUnaryCall<global::RegistActionPlanReply> RegistActionPlanAsync(global::RegistActionPlanRequest request, grpc::CallOptions options)
    {
      return CallInvoker.AsyncUnaryCall(__Method_RegistActionPlan, null, options, request);
    }
    /// <summary>
    /// 行動一覧の更新
    /// </summary>
    /// <param name="request">The request to send to the server.</param>
    /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
    /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
    /// <param name="cancellationToken">An optional token for canceling the call.</param>
    /// <returns>The response received from the server.</returns>
    public virtual global::RegistActionsReply RegistActions(global::RegistActionsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
    {
      return RegistActions(request, new grpc::CallOptions(headers, deadline, cancellationToken));
    }
    /// <summary>
    /// 行動一覧の更新
    /// </summary>
    /// <param name="request">The request to send to the server.</param>
    /// <param name="options">The options for the call.</param>
    /// <returns>The response received from the server.</returns>
    public virtual global::RegistActionsReply RegistActions(global::RegistActionsRequest request, grpc::CallOptions options)
    {
      return CallInvoker.BlockingUnaryCall(__Method_RegistActions, null, options, request);
    }
    /// <summary>
    /// 行動一覧の更新
    /// </summary>
    /// <param name="request">The request to send to the server.</param>
    /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
    /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
    /// <param name="cancellationToken">An optional token for canceling the call.</param>
    /// <returns>The call object.</returns>
    public virtual grpc::AsyncUnaryCall<global::RegistActionsReply> RegistActionsAsync(global::RegistActionsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
    {
      return RegistActionsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
    }
    /// <summary>
    /// 行動一覧の更新
    /// </summary>
    /// <param name="request">The request to send to the server.</param>
    /// <param name="options">The options for the call.</param>
    /// <returns>The call object.</returns>
    public virtual grpc::AsyncUnaryCall<global::RegistActionsReply> RegistActionsAsync(global::RegistActionsRequest request, grpc::CallOptions options)
    {
      return CallInvoker.AsyncUnaryCall(__Method_RegistActions, null, options, request);
    }
    /// <summary>
    /// 行先一覧の更新
    /// </summary>
    /// <param name="request">The request to send to the server.</param>
    /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
    /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
    /// <param name="cancellationToken">An optional token for canceling the call.</param>
    /// <returns>The response received from the server.</returns>
    public virtual global::RegistDestinationsReply RegistDestinations(global::RegistDestinationsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
    {
      return RegistDestinations(request, new grpc::CallOptions(headers, deadline, cancellationToken));
    }
    /// <summary>
    /// 行先一覧の更新
    /// </summary>
    /// <param name="request">The request to send to the server.</param>
    /// <param name="options">The options for the call.</param>
    /// <returns>The response received from the server.</returns>
    public virtual global::RegistDestinationsReply RegistDestinations(global::RegistDestinationsRequest request, grpc::CallOptions options)
    {
      return CallInvoker.BlockingUnaryCall(__Method_RegistDestinations, null, options, request);
    }
    /// <summary>
    /// 行先一覧の更新
    /// </summary>
    /// <param name="request">The request to send to the server.</param>
    /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
    /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
    /// <param name="cancellationToken">An optional token for canceling the call.</param>
    /// <returns>The call object.</returns>
    public virtual grpc::AsyncUnaryCall<global::RegistDestinationsReply> RegistDestinationsAsync(global::RegistDestinationsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
    {
      return RegistDestinationsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
    }
    /// <summary>
    /// 行先一覧の更新
    /// </summary>
    /// <param name="request">The request to send to the server.</param>
    /// <param name="options">The options for the call.</param>
    /// <returns>The call object.</returns>
    public virtual grpc::AsyncUnaryCall<global::RegistDestinationsReply> RegistDestinationsAsync(global::RegistDestinationsRequest request, grpc::CallOptions options)
    {
      return CallInvoker.AsyncUnaryCall(__Method_RegistDestinations, null, options, request);
    }
    /// <summary>
    /// 現在の行動予定一覧表
    /// </summary>
    /// <param name="request">The request to send to the server.</param>
    /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
    /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
    /// <param name="cancellationToken">An optional token for canceling the call.</param>
    /// <returns>The response received from the server.</returns>
    public virtual global::ActionPlanTableReply ActionPlanTable(global::ActionPlanTableRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
    {
      return ActionPlanTable(request, new grpc::CallOptions(headers, deadline, cancellationToken));
    }
    /// <summary>
    /// 現在の行動予定一覧表
    /// </summary>
    /// <param name="request">The request to send to the server.</param>
    /// <param name="options">The options for the call.</param>
    /// <returns>The response received from the server.</returns>
    public virtual global::ActionPlanTableReply ActionPlanTable(global::ActionPlanTableRequest request, grpc::CallOptions options)
    {
      return CallInvoker.BlockingUnaryCall(__Method_ActionPlanTable, null, options, request);
    }
    /// <summary>
    /// 現在の行動予定一覧表
    /// </summary>
    /// <param name="request">The request to send to the server.</param>
    /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
    /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
    /// <param name="cancellationToken">An optional token for canceling the call.</param>
    /// <returns>The call object.</returns>
    public virtual grpc::AsyncUnaryCall<global::ActionPlanTableReply> ActionPlanTableAsync(global::ActionPlanTableRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
    {
      return ActionPlanTableAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
    }
    /// <summary>
    /// 現在の行動予定一覧表
    /// </summary>
    /// <param name="request">The request to send to the server.</param>
    /// <param name="options">The options for the call.</param>
    /// <returns>The call object.</returns>
    public virtual grpc::AsyncUnaryCall<global::ActionPlanTableReply> ActionPlanTableAsync(global::ActionPlanTableRequest request, grpc::CallOptions options)
    {
      return CallInvoker.AsyncUnaryCall(__Method_ActionPlanTable, null, options, request);
    }
    /// <summary>
    /// スタッフマスター
    /// </summary>
    /// <param name="request">The request to send to the server.</param>
    /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
    /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
    /// <param name="cancellationToken">An optional token for canceling the call.</param>
    /// <returns>The response received from the server.</returns>
    public virtual global::StaffMasterReply StaffMaster(global::StaffMasterRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
    {
      return StaffMaster(request, new grpc::CallOptions(headers, deadline, cancellationToken));
    }
    /// <summary>
    /// スタッフマスター
    /// </summary>
    /// <param name="request">The request to send to the server.</param>
    /// <param name="options">The options for the call.</param>
    /// <returns>The response received from the server.</returns>
    public virtual global::StaffMasterReply StaffMaster(global::StaffMasterRequest request, grpc::CallOptions options)
    {
      return CallInvoker.BlockingUnaryCall(__Method_StaffMaster, null, options, request);
    }
    /// <summary>
    /// スタッフマスター
    /// </summary>
    /// <param name="request">The request to send to the server.</param>
    /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
    /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
    /// <param name="cancellationToken">An optional token for canceling the call.</param>
    /// <returns>The call object.</returns>
    public virtual grpc::AsyncUnaryCall<global::StaffMasterReply> StaffMasterAsync(global::StaffMasterRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
    {
      return StaffMasterAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
    }
    /// <summary>
    /// スタッフマスター
    /// </summary>
    /// <param name="request">The request to send to the server.</param>
    /// <param name="options">The options for the call.</param>
    /// <returns>The call object.</returns>
    public virtual grpc::AsyncUnaryCall<global::StaffMasterReply> StaffMasterAsync(global::StaffMasterRequest request, grpc::CallOptions options)
    {
      return CallInvoker.AsyncUnaryCall(__Method_StaffMaster, null, options, request);
    }
    /// <summary>
    /// 行動マスター
    /// </summary>
    /// <param name="request">The request to send to the server.</param>
    /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
    /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
    /// <param name="cancellationToken">An optional token for canceling the call.</param>
    /// <returns>The response received from the server.</returns>
    public virtual global::ActionMasterReply ActionMaster(global::ActionMasterRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
    {
      return ActionMaster(request, new grpc::CallOptions(headers, deadline, cancellationToken));
    }
    /// <summary>
    /// 行動マスター
    /// </summary>
    /// <param name="request">The request to send to the server.</param>
    /// <param name="options">The options for the call.</param>
    /// <returns>The response received from the server.</returns>
    public virtual global::ActionMasterReply ActionMaster(global::ActionMasterRequest request, grpc::CallOptions options)
    {
      return CallInvoker.BlockingUnaryCall(__Method_ActionMaster, null, options, request);
    }
    /// <summary>
    /// 行動マスター
    /// </summary>
    /// <param name="request">The request to send to the server.</param>
    /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
    /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
    /// <param name="cancellationToken">An optional token for canceling the call.</param>
    /// <returns>The call object.</returns>
    public virtual grpc::AsyncUnaryCall<global::ActionMasterReply> ActionMasterAsync(global::ActionMasterRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
    {
      return ActionMasterAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
    }
    /// <summary>
    /// 行動マスター
    /// </summary>
    /// <param name="request">The request to send to the server.</param>
    /// <param name="options">The options for the call.</param>
    /// <returns>The call object.</returns>
    public virtual grpc::AsyncUnaryCall<global::ActionMasterReply> ActionMasterAsync(global::ActionMasterRequest request, grpc::CallOptions options)
    {
      return CallInvoker.AsyncUnaryCall(__Method_ActionMaster, null, options, request);
    }
    /// <summary>
    /// 行先マスター
    /// </summary>
    /// <param name="request">The request to send to the server.</param>
    /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
    /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
    /// <param name="cancellationToken">An optional token for canceling the call.</param>
    /// <returns>The response received from the server.</returns>
    public virtual global::DestinationMasterReply DestinationMaster(global::DestinationMasterRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
    {
      return DestinationMaster(request, new grpc::CallOptions(headers, deadline, cancellationToken));
    }
    /// <summary>
    /// 行先マスター
    /// </summary>
    /// <param name="request">The request to send to the server.</param>
    /// <param name="options">The options for the call.</param>
    /// <returns>The response received from the server.</returns>
    public virtual global::DestinationMasterReply DestinationMaster(global::DestinationMasterRequest request, grpc::CallOptions options)
    {
      return CallInvoker.BlockingUnaryCall(__Method_DestinationMaster, null, options, request);
    }
    /// <summary>
    /// 行先マスター
    /// </summary>
    /// <param name="request">The request to send to the server.</param>
    /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
    /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
    /// <param name="cancellationToken">An optional token for canceling the call.</param>
    /// <returns>The call object.</returns>
    public virtual grpc::AsyncUnaryCall<global::DestinationMasterReply> DestinationMasterAsync(global::DestinationMasterRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
    {
      return DestinationMasterAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
    }
    /// <summary>
    /// 行先マスター
    /// </summary>
    /// <param name="request">The request to send to the server.</param>
    /// <param name="options">The options for the call.</param>
    /// <returns>The call object.</returns>
    public virtual grpc::AsyncUnaryCall<global::DestinationMasterReply> DestinationMasterAsync(global::DestinationMasterRequest request, grpc::CallOptions options)
    {
      return CallInvoker.AsyncUnaryCall(__Method_DestinationMaster, null, options, request);
    }
    /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
    protected override DestinationbardCommunicationAPIClient NewInstance(ClientBaseConfiguration configuration)
    {
      return new DestinationbardCommunicationAPIClient(configuration);
    }
  }

  /// <summary>Creates service definition that can be registered with a server</summary>
  /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
  public static grpc::ServerServiceDefinition BindService(DestinationbardCommunicationAPIBase serviceImpl)
  {
    return grpc::ServerServiceDefinition.CreateBuilder()
        .AddMethod(__Method_GetRegistStaff, serviceImpl.GetRegistStaff)
        .AddMethod(__Method_RegistStaff, serviceImpl.RegistStaff)
        .AddMethod(__Method_GetActions, serviceImpl.GetActions)
        .AddMethod(__Method_GetDestinations, serviceImpl.GetDestinations)
        .AddMethod(__Method_RegistActionPlan, serviceImpl.RegistActionPlan)
        .AddMethod(__Method_RegistActions, serviceImpl.RegistActions)
        .AddMethod(__Method_RegistDestinations, serviceImpl.RegistDestinations)
        .AddMethod(__Method_ActionPlanTable, serviceImpl.ActionPlanTable)
        .AddMethod(__Method_StaffMaster, serviceImpl.StaffMaster)
        .AddMethod(__Method_ActionMaster, serviceImpl.ActionMaster)
        .AddMethod(__Method_DestinationMaster, serviceImpl.DestinationMaster).Build();
  }

  /// <summary>Register service method with a service binder with or without implementation. Useful when customizing the  service binding logic.
  /// Note: this method is part of an experimental API that can change or be removed without any prior notice.</summary>
  /// <param name="serviceBinder">Service methods will be bound by calling <c>AddMethod</c> on this object.</param>
  /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
  public static void BindService(grpc::ServiceBinderBase serviceBinder, DestinationbardCommunicationAPIBase serviceImpl)
  {
    serviceBinder.AddMethod(__Method_GetRegistStaff, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::GetRegistStaffRequest, global::GetRegistStaffReply>(serviceImpl.GetRegistStaff));
    serviceBinder.AddMethod(__Method_RegistStaff, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::RegistStaffRequest, global::RegistStaffReply>(serviceImpl.RegistStaff));
    serviceBinder.AddMethod(__Method_GetActions, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::GetActionsRequest, global::GetActionsReply>(serviceImpl.GetActions));
    serviceBinder.AddMethod(__Method_GetDestinations, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::GetDestinationsRequest, global::GetDestinationsReply>(serviceImpl.GetDestinations));
    serviceBinder.AddMethod(__Method_RegistActionPlan, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::RegistActionPlanRequest, global::RegistActionPlanReply>(serviceImpl.RegistActionPlan));
    serviceBinder.AddMethod(__Method_RegistActions, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::RegistActionsRequest, global::RegistActionsReply>(serviceImpl.RegistActions));
    serviceBinder.AddMethod(__Method_RegistDestinations, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::RegistDestinationsRequest, global::RegistDestinationsReply>(serviceImpl.RegistDestinations));
    serviceBinder.AddMethod(__Method_ActionPlanTable, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::ActionPlanTableRequest, global::ActionPlanTableReply>(serviceImpl.ActionPlanTable));
    serviceBinder.AddMethod(__Method_StaffMaster, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::StaffMasterRequest, global::StaffMasterReply>(serviceImpl.StaffMaster));
    serviceBinder.AddMethod(__Method_ActionMaster, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::ActionMasterRequest, global::ActionMasterReply>(serviceImpl.ActionMaster));
    serviceBinder.AddMethod(__Method_DestinationMaster, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::DestinationMasterRequest, global::DestinationMasterReply>(serviceImpl.DestinationMaster));
  }

}
#endregion
